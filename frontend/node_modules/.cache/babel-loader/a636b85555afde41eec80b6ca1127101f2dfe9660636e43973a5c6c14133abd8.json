{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodejsproj\\\\api-assignment\\\\frontend\\\\src\\\\pages\\\\GetAllDevices.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetAllDevices = () => {\n  _s();\n  const [devices, setDevices] = useState([]); // State for fetched devices\n  const [loading, setLoading] = useState(false); // State for loading indicator\n  const [error, setError] = useState(null); // State for error messages\n\n  const handleGetAllDevices = async () => {\n    console.log('Fetch Devices button clicked'); // Debugging log\n    setLoading(true);\n    setError(null); // Reset error state before new fetch\n    try {\n      // Fetch data from backend API\n      const result = await axios.get('http://localhost:5000/api/getalldevices');\n      console.log('Backend response:', result.data); // Log backend response\n\n      // Validate and update devices state\n      if (Array.isArray(result.data)) {\n        setDevices(result.data);\n      } else {\n        console.warn('Unexpected response format:', result.data);\n        setDevices([]);\n        setError('Unexpected response format from server.');\n      }\n    } catch (error) {\n      console.error('Error fetching devices:', error); // Log error details\n      setError('Failed to fetch devices. Please try again later.');\n      setDevices([]); // Clear devices in case of error\n    } finally {\n      setLoading(false); // Stop the loading indicator\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Devices\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetAllDevices,\n      disabled: loading,\n      children: loading ? 'Fetching Devices...' : 'Fetch Devices'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: devices.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n        children: loading ? 'Loading...' : 'No devices available.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : devices.map((device, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: device.name || `Device ${index + 1}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(GetAllDevices, \"i1gAEZV84GD5D4l0WrisQpRVYHE=\");\n_c = GetAllDevices;\nexport default GetAllDevices;\nvar _c;\n$RefreshReg$(_c, \"GetAllDevices\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","GetAllDevices","_s","devices","setDevices","loading","setLoading","error","setError","handleGetAllDevices","console","log","result","get","data","Array","isArray","warn","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","color","length","map","device","index","name","_c","$RefreshReg$"],"sources":["C:/nodejsproj/api-assignment/frontend/src/pages/GetAllDevices.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst GetAllDevices = () => {\r\n  const [devices, setDevices] = useState([]); // State for fetched devices\r\n  const [loading, setLoading] = useState(false); // State for loading indicator\r\n  const [error, setError] = useState(null); // State for error messages\r\n\r\n  const handleGetAllDevices = async () => {\r\n    console.log('Fetch Devices button clicked'); // Debugging log\r\n    setLoading(true);\r\n    setError(null); // Reset error state before new fetch\r\n    try {\r\n      // Fetch data from backend API\r\n      const result = await axios.get('http://localhost:5000/api/getalldevices');\r\n      console.log('Backend response:', result.data); // Log backend response\r\n\r\n      // Validate and update devices state\r\n      if (Array.isArray(result.data)) {\r\n        setDevices(result.data);\r\n      } else {\r\n        console.warn('Unexpected response format:', result.data);\r\n        setDevices([]);\r\n        setError('Unexpected response format from server.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching devices:', error); // Log error details\r\n      setError('Failed to fetch devices. Please try again later.');\r\n      setDevices([]); // Clear devices in case of error\r\n    } finally {\r\n      setLoading(false); // Stop the loading indicator\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>All Devices</h2>\r\n      {/* Fetch Devices Button */}\r\n      <button onClick={handleGetAllDevices} disabled={loading}>\r\n        {loading ? 'Fetching Devices...' : 'Fetch Devices'}\r\n      </button>\r\n\r\n      {/* Display Error Message */}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n      {/* Devices List */}\r\n      <ul>\r\n        {devices.length === 0 ? (\r\n          <li>{loading ? 'Loading...' : 'No devices available.'}</li>\r\n        ) : (\r\n          devices.map((device, index) => (\r\n            <li key={index}>{device.name || `Device ${index + 1}`}</li>\r\n          ))\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetAllDevices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}