{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodejsproj\\\\api-assignment\\\\frontend\\\\src\\\\pages\\\\GetNotificationCount.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetNotificationCount = () => {\n  _s();\n  const [count, setCount] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleGetNotificationCount = async () => {\n    setLoading(true);\n    setError(null); // Reset error state before fetching\n    try {\n      const result = await axios.get('http://localhost:5000/api/notifications/count');\n      setCount(result.data.count);\n    } catch (error) {\n      setError('Error fetching notification count');\n      setCount(null); // Reset count in case of an error\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notification Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetNotificationCount,\n      disabled: loading,\n      children: loading ? 'Fetching Count...' : 'Get Notification Count'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this), count !== null && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Notifications: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 36\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(GetNotificationCount, \"I/d+6NpzhEqA0YHXKnwDCKh7fn0=\");\n_c = GetNotificationCount;\nexport default GetNotificationCount;\nvar _c;\n$RefreshReg$(_c, \"GetNotificationCount\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","GetNotificationCount","_s","count","setCount","loading","setLoading","error","setError","handleGetNotificationCount","result","get","data","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","color","_c","$RefreshReg$"],"sources":["C:/nodejsproj/api-assignment/frontend/src/pages/GetNotificationCount.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst GetNotificationCount = () => {\r\n  const [count, setCount] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleGetNotificationCount = async () => {\r\n    setLoading(true);\r\n    setError(null); // Reset error state before fetching\r\n    try {\r\n      const result = await axios.get('http://localhost:5000/api/notifications/count');\r\n      setCount(result.data.count);\r\n    } catch (error) {\r\n      setError('Error fetching notification count');\r\n      setCount(null); // Reset count in case of an error\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Notification Count</h2>\r\n      <button onClick={handleGetNotificationCount} disabled={loading}>\r\n        {loading ? 'Fetching Count...' : 'Get Notification Count'}\r\n      </button>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n      {count !== null && !error && <p>Total Notifications: {count}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetNotificationCount;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMY,0BAA0B,GAAG,MAAAA,CAAA,KAAY;IAC7CH,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAChB,IAAI;MACF,MAAME,MAAM,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,+CAA+C,CAAC;MAC/EP,QAAQ,CAACM,MAAM,CAACE,IAAI,CAACT,KAAK,CAAC;IAC7B,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,QAAQ,CAAC,mCAAmC,CAAC;MAC7CJ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEN,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BjB,OAAA;MAAQkB,OAAO,EAAET,0BAA2B;MAACU,QAAQ,EAAEd,OAAQ;MAAAQ,QAAA,EAC5DR,OAAO,GAAG,mBAAmB,GAAG;IAAwB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,EACRV,KAAK,iBAAIP,OAAA;MAAGoB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAR,QAAA,EAAEN;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChDd,KAAK,KAAK,IAAI,IAAI,CAACI,KAAK,iBAAIP,OAAA;MAAAa,QAAA,GAAG,uBAAqB,EAACV,KAAK;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEV,CAAC;AAACf,EAAA,CA7BID,oBAAoB;AAAAqB,EAAA,GAApBrB,oBAAoB;AA+B1B,eAAeA,oBAAoB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}